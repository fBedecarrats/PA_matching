---
output: html_document
editor_options: 
  chunk_output_type: console
---
# Computing environment setup

The code used by Wolf and colleagues to obtain their results and published on Github mixes three different coding languages: python, R and Julia. Moreover, although the code is generally clearly written and includes some explanatory comments, several adjustments in the code are required to enable it to run on a different machine. This document provides a technical procedure to enable the reproducibility of the computations shared by Wolf and colleagues.

## Comments on the reproducibility of the analyses

Some good practices are not respected. The analysis mentions that the sources are publicly available, but the data is not available as is: needs an access to Google Earth Engine. The API is not public and this accessibility is conditioned by the will of Google to keep its platform in free access and not to make any evolution in the GEE API that would not be backward compatible. For these resons, it seems recommended to archive the data outputed by sources which reproducibility is not guaranteed.

It is also very likely that some data used for the analysis gets updated: UICN species data is regularly updated WDPA data on protected area also

The obtaining of the data is not documented for BOTW and IUCN range maps.

## Technical environment

It is possible to combine different programming languages in statistical computing environments such as Jupyter or RMarkdown, or its new generation Quarto. We decided to use Quarto because of its versatility and our familiarity of this tool.

Quarto can be obtained at www.quarto.org.

Requires Linux or a Windows machine running WSL, otherwise a strong rewriting of some files is needed. We run it on a Windows personal computer.

## Prerequisites

### Google services

Have a gmail account to access google services Google Earth Engine and Google Drive.

### wget

The code requires a working installation of Wget. Wget comes with linux platform and can be installed on MAC. On Windows, it requires Windows Subsystem for Linux.

## Set up R

We install all R dependencies that might be required

```{r install_r_packages}

# Install from Github --------------------------------------------------------

# Some packages need to be installed from developper sources because there are
# not available or official sources have some issues.
# Installing version 1.3.5 which is the last working version apparently

if (system.file(package = "doMC") == "") {
  remotes::install_github("https://github.com/cran/doMC/tree/fbea362b96cc4469deb6065ff9fbd5d4794ccac1")
} 
if (system.file(package = "gdalUtils") == "") {
  remotes::install_github("https://github.com/cran/gdalUtils", upgrade = FALSE)
} 
if (system.file(package = "ggeasy") == "") {
  remotes::install_github("jonocarroll/ggeasy")
} 
if (system.file(package = "velox") == "") {
  remotes::install_github("https://github.com/hunzikp/velox", upgrade = FALSE)
} 
if (system.file(package = "rnaturalearth") == "") {
  remotes::install_github("https://github.com/ropensci/rnaturalearth")
} 
if (system.file(package = "gdalUtils") == "") {
  remotes::install_github("gearslaboratory/gdalUtils")
} 


# Install from CRAN ------------------------------------------------------------

# These packages are available from the usual source from R
required_packages <- c( # List all required R packages
  "reticulate", # To interact with python (normally installed with Quarto)
  "JuliaCall", # To interact with Julia 
  "tidyverse", # To facilitate data manipulation
  # All packages below are used in Wolf and al. code files:
  "countrycode",
  "cowplot",
  "data.table",
  "dtplyr",
  "fasterize",
  "foreach",
  "foreign",
  "ggforce",
  "ggplot2",
  "ggrepel",
  "GpGp",
  "grid",
  "jsonlite",
  "landscapetools",
  "lme4",
  "MCMC.OTU",
  "ncdf4",
  "parallel",
  "pbapply",
  "plyr",
  "raster",
  "rasterVis",
  "rbounds",
  "RColorBrewer",
  "RCurl",
  "readr",
  "reshape2",
  "rgdal",
  "rjson",
  "rnaturalearth",
  "scales",
  "sf",
  "smoothr",
  "spaMM",
  "spgwr",
  "spmoran",
  "spNNGP",
  "stars",
  "stringr",
  "tidyverse",
  # "unix",
  "velox",
  "viridis",
  "wbstats",
  "wdpar") 
missing <- !(required_packages %in% installed.packages())

# Install 
if(any(missing)) install.packages(required_packages[missing], 
                                  repos = "https://cran.irsn.fr/")
```

## Set up python

```{r set_up_python}
library(reticulate) # to run python from R

# Variables to modify
my_envname <- "replication-wolf"
scripts_to_run <- "003" # or c("001", "003") or "001"

# Install python if not already present
if (!dir.exists(miniconda_path())) {
  install_miniconda()
}
# Create environment if not already
if (!my_envname %in% conda_list()$name) {
  conda_create(my_envname)
}
# Packages needed for each script
requirements <- list(
  "001" = c("earthengine-api", "rasterio", "pandas", "pydrive"),
  "003" = c("fiona", "rasterio", "ray-default", "dbfread", "pandas"))
addition <- c()
# Combined depending on the variable defined at beginning of code chunk
required <- unique(unlist(requirements[scripts_to_run]))
# identify which ones are missing
py_installed_packages <- py_list_packages(my_envname)$package
missing_packages <- required[!required %in% py_installed_packages]
# Install those
if (length(missing_packages) > 0) {
  conda_install(envname = my_envname, 
              packages = missing_packages)
}

# Adding a dependency required on linux platforms
if ((Sys.info()["sysname"] == "Linux") &
    (!"libstdcxx-ng" %in% py_installed_packages)) {
  conda_install(envname = my_envname,
              packages = "libstdcxx-ng")
}

# Activate the corresponding environment
use_condaenv(my_envname)
```

Create an authorization

```{python setup_google_services}
#| eval: false

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive

gauth = GoogleAuth()
# Try to load saved client credentials
gauth.LoadCredentialsFile("mycreds.txt")
if gauth.credentials is None:
    # Authenticate if they're not there
    gauth.LocalWebserverAuth()
elif gauth.access_token_expired:
    # Refresh them if expired
    gauth.Refresh()
else:
    # Initialize the saved creds
    gauth.Authorize()
# Save the current credentials to a file
gauth.SaveCredentialsFile("mycreds.txt")
```

## Set up Julia

First we install or set-up Julia from R if needed.

```{r set_up_julia}
library(JuliaCall)

if (!dir.exists(paste0(rappdirs::user_data_dir(), "/R/JuliaCall/julia"))) {
  install_julia()
}
if (!exists("my_julia")) {
  my_julia <- julia_setup()
}
julia_install_package_if_needed("ArchGDAL")
julia_install_package_if_needed("DataFrames")
julia_install_package_if_needed("Discretizers")
julia_install_package_if_needed("Shapefile")
julia_install_package_if_needed("FreqTables")
julia_install_package_if_needed("Plots")
julia_install_package_if_needed("StatsBase")
julia_install_package_if_needed("CSV")
julia_install_package_if_needed("LibGEOS")
```

## Harmonize paths


## Adapt to Windows system (optionnal)

The script `002 - dl_IUCN.R` includes a system command that `wget` that refers to a fownloading software that is included in UNIX platforms (Mac and Linux). It is possible however to run it on Windows, if and only the Windows system includs Windows Subsystem for Linux. In that case, if wsl is not already installed the user must first install `parallel` that includes `wget`, runing the command `wsl sudo apt-get update` followed by the command `wsl sudo apt-get install parallel`.

On Linux, if `wget` is not available, the user must run the same commands without `wsl`, that is run the command `sudo apt-get update` followed by the command `sudo apt-get install parallel`.

```{r}
if (Sys.info()["sysname"] == "Linux") {
  system("sudo apt update")
  system("sudo apt install -y parallel")
} 
```



```{r wget_for_windows}
#| eval: false

# Replace all wget calls by wsl wget
if (Sys.info()["sysname"] == "Windows") {
  replace_all("002 - dl_IUCN.R", "wget", "wsl wget")
}

```

## Testing R

```{r simple_test_r}
1 + 1

```

## Testing python

Needs reticulate (already installed here).

```{python simple_test_python}
1 + 1
```

## Testing Julia

```{julia simple_test_julia}
1 + 1
```

## Executing 004 - join rasters

\# The call below throws errors messages during execution:

\# Error in x\$.self\$finalize() : attempt to apply non-function

\# According to {raster}

\# https://github.com/rspatial/raster/issues/282

URL for Curtis et al. was: https://science.sciencemag.org/highwire/filestream/715492/field_highwire_adjunct_files/2/aau3445-Data-S3.tif

It is now: https://www.science.org/action/downloadSupplement?doi=10.1126%2Fscience.aau3445&file=aau3445-data-s3.tif

The name of the file has been changed to lowercase: data_input/aau3445-Data-S3.tif becomes aau3445-data-s3.tif
