---
title: "Reimplement matching"
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(aws.s3)
library(terra)
library(tictoc)
library(stars)
library(rgee)
library(tmap)
library(geojsonio)
library(googledrive)
setwd("replication_report")
```


We use the R package `rgee` as an interface to Google Earth engine API.

```{r}
# Authenticate if needed
# ee_Authenticate()
# ee_clean_user_credentials('ndef')

# Setup ------------------------------------------------------------------------
ee_Initialize(user = "my_name", drive = TRUE) # change ndef with 'toto'
```

Instead of separate rasters, we merge all the data as stacked bands of the same raster.

```{r}
scale <- 0.008983153 # From Wolf et al. 2021
drive_folder <- "rgee"
local_folder <- "temp"

# Hansen/GFC -------------------------------------------------------------------
gfc <- ee$Image("UMD/hansen/global_forest_change_2021_v1_9")

## Lossyear ------------------------------------
lossyear <- gfc$select("lossyear")
lossyear <- lossyear$updateMask(lossyear$neq(0)) # maskout 0
lossyear <- lossyear$reduceResolution(reducer = ee$Reducer$mode(), 
                                      bestEffort = TRUE)
lossyear <- lossyear$toInt()

## Cover ----------------------------------------
# On datamask, 0=no data, 1=land, 2=water. We keep land.
mask_cover <- gfc$select("datamask")$eq(1)
cover <-  gfc$updateMask(cover_mask)
cover <- cover$select("treecover2000")
cover <- cover$reduceResolution(reducer = ee$Reducer$mean(), 
                                bestEffort = TRUE)
cover <- cover$toInt()

## Loss --------------------------------------------
loss <- gfc$select("loss")
loss <- loss$reduceResolution(reducer = ee$Reducer$mean(), bestEffort = TRUE)
loss <- loss$toInt32()

# Other rasters fetched from GEE by wold et al. --------------------------------
elev <- ee$Image("USGS/GTOPO30")
elev <- elev$toInt()
# ee_print(elev)
travel_time <- ee$Image("Oxford/MAP/accessibility_to_cities_2015_v1_0")
travel_time <- travel_time$toInt()
gpw <- paste0("CIESIN/GPWv411/GPW_UNWPP-Adjusted_Population_Density/",
              "gpw_v4_population_density_adjusted_to_2015_", 
              "unwpp_country_totals_rev11_2000_30_sec")
pop_dens <- ee$Image(gpw)
pop_dens <- pop_dens$select("unwpp-adjusted_population_density")
pop_dens <- pop_dens$focal_mean(radius = 20e3, kernelType = "circle", 
                                units = "meters")
pop_dens <- pop_dens$toInt()

# stack bands into a single raster and export ----------------------------------
combined <- cover$addBands(c(lossyear, loss, elev, travel_time, pop_dens))
combined <- combined$rename(c("cover", "lossyear", "loss", "elev",
                                          "travel_time", "pop_dens"))
# Export with the same crsTransform and dimensions than Wolf et al. (2021)
gfc_task <- ee_as_raster(image = combined,
                         crsTransform = paste(scale, 0, -180, 0, -scale, 90, sep = ", "),
                         crs = "EPSG:4326",
                         dimensions = paste(as.character(round(360/scale)), "x",
                                            as.character(round(360/scale))),
                         container = "rgee3",
                         maxPixels = 1e12,
                         dsn = "data_input/stacked.tif")
```


Load GEE data

```{r}
# Merge rasters received from GEE
rast_files <- list.files(path = "data_input", pattern = "stacked.*", 
                         full.names = TRUE)
my_rasts <- map(rast_files, rast)
my_rast <- do.call(merge, c(my_rasts, filename = "data_input/gee_all.tif"))

my_star <- read_stars("data_input/gee_all.tif")

tic()
my_df <- as.data.frame(my_star)
toc()
```



```{r}
# Fetch other data



drivers
ecoregions
country

# Stack as layers in the general raster


# Convert the raster as dataframe
```


```{r}

processed_rasters <- get_bucket_df(
  bucket = "fbedecarrats",
  prefix = "Replication_wolf/data_processed/rasters",
  region = "") %>%
  pluck("Key")

# A function to iterate/vectorize copy
save_from_s3 <- function(x, y) {
  aws.s3::save_object(
    object = x,
    bucket = "fbedecarrats",
    file = y,
    overwrite = TRUE,
    region = "")
  }

dest_processed <- str_remove(processed_rasters, "Replication_wolf/")
name_layers <- str_remove(dest_processed, "data_processed/rasters/")
name_layers <- str_remove(name_layers, ".tif")

```

Copy files

```{r}
map2(processed_rasters, dest_processed, save_from_s3)
```

Try with Terra

```{r}
gee_rast <- rast(dest_processed[1:8])
names(gee_rast) <- name_layers[1:8]

my_list <- list("a", "b", "c")

do.call(paste, c(my_list, sep = "-"))

tm_shape(gee_rast) +
  tm_raster("PAs")
  
writeRaster(gee_rast, "temp/gee_rast.tif", overwrite = TRUE)
```

Try with stars

```{r}
gee_stars <- read_stars(dest_processed)
str(gee_stars)

write_stars(gee_stars, "temp/gee_stars.tif")
class(gee_stars)
```
